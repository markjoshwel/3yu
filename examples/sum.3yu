d sum~ FL_NN               ; sum: (List[_ Numeric]) -> Numeric
: sum~ (
   : nums~ $1              : nums: List[_ Numeric] = $1  // argument 1
   ? (                     ; if (len(nums) == 0) (return 0)
      @ len~ nums~
      = $0 0
   ) (
      ` 0 `
   )

   + (                     ; $0 = (index(nums, 0)) + sum(slice(nums, len(nums), 1))
      @ index~ nums~
      @ ! 0
   ) (
      @ slice~ nums~
      @ ! 1                ;     start
      @ ! ( @ len~ nums~ ) ;     stop
      @ ! 1                ;     step
      @ sum~ $0
   )

   ; implicit return of $0 (addition operation)
)

@ stdout~ (                ; stdout(sum([1, 2, 3]))
   @ sum~ (
      d list~ L3I          ;     list: List[3 Integer] = []
      + list~ 1            ;     list.append(1)
      + $0 2               ;     list.append(2)
      + $0 3               ;     list.append(3)
      
      ; implicit return of $0 (list: List[3 Integer] = [1, 2, 3])
   )
)
